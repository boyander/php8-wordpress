fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=WORDPRESS:100m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";

limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

server {
    listen 80 default_server;
    listen [::]:80;
    root /var/www;
    server_name _;

    index index.php index.html index.htm;

    client_max_body_size 100M;
    proxy_max_temp_file_size 0;

    add_header X-Faable-Cache $upstream_cache_status;

    location / {
        # http://v2.wp-api.org/guide/problems/#query-parameters-are-ignored
        try_files $uri $uri/ /index.php$is_args$args;
    }


    # Force disable wp-json user listing
    location = /wp-json/wp/v2/user {
        deny all;
        return 404;
        access_log off;
        log_not_found off;
    }

    location /wp-json/ { 
        rewrite ^/wp-json/(.*?)$ /?rest_route=/$1 last;
    } 

    # When to skip cache 
    set $skip_cache 0;
    # POST requests and URLs with a query string should always go to PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }   
    if ($query_string != "") {
        set $skip_cache 1;
    }   
    # Don't cache URIs containing the following segments
    if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php
                         |sitemap(_index)?.xml") {
        set $skip_cache 1;
    }   
    # Don't use the cache for logged-in users or recent commenters
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass
        |wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }

    location ~ \.php$ {
        try_files $uri /index.php;
        include fastcgi.conf;
        fastcgi_pass unix:/var/run/php/php8-fpm.sock;
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
        fastcgi_cache WORDPRESS;
        fastcgi_cache_valid 200 5m;
    }


    # Rate limit access to wp-login.php to block against brute force attacks.
    location = /wp-login.php {
        limit_req zone=one burst=1 nodelay;
        fastcgi_pass unix:/var/run/php/php8-fpm.sock;
        include fastcgi.conf;
    }

    # this prevents hidden files (beginning with a period) from being served
    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all; 
    }

    # Deny access to uploads that aren’t images, videos, music, etc.
    location ~* ^/wp-content/uploads/.*.(html|htm|shtml|php|js|swf)$ {
        deny all;
    }

    # Aggressive caching for static files
    # If you alter static files often, please use "add_header Cache-Control "max-age=31536000, public, must-revalidate, proxy-revalidate";"
    location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
        expires 86400s;
        access_log off;
        log_not_found off;
        add_header Pragma public;
        add_header Cache-Control "max-age=86400, public, must-revalidate, proxy-revalidate";
        add_header "x-served-by" "cdn.faable.com";
    }

    # Don't log robots.txt requests
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Disable access to xmlrpc
    location = /xmlrpc.php {
        deny all;
        return 404;
        access_log off;
        log_not_found off;
    }

    #Disable access to your configuration files and other files that you don’t want to users are able to see
    location ~* /(wp-config.php|readme.html|license.txt|nginx.conf) {
        deny all;
        return 404;
        access_log off;
        log_not_found off;
    }

    #Disable execution of scripts other than PHP from your document root
    location ~* .(pl|cgi|py|sh|lua|asp)$ {
        return 444;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    # Stop scann for the follow files on plugins folder
    location ~* ^/wp-content/plugins/.+\.(txt|log|md)$ {
        deny all;
        error_page 403 =404 / ;
    }

    #Direct PHP File Access
    #If somehow, a hacker successfully sneaks in a PHP file onto your site,
    #they’ll be able to run this file by loading file which effectively becomes a backdoor to infiltrate your site.
    #We should disable direct access to any PHP files by adding the following rules:
    location ~* /(?:uploads|files|wp-content|wp-includes|akismet)/.*.php$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    #Dotfiles
    #Similar to PHP file, a dotfile like .htaccess, .user.ini, and .git may contain sensitive information.
    #To be on the safer side, it’s better to disable direct access to these files.
    location ~ /\.(svn|git)/* {
        deny all;
        access_log off;
        log_not_found off;
    }
    location ~ /\.ht {
        deny all;
        access_log off;
        log_not_found off;
    }
    location ~ /\.user.ini {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny backup extensions & log files
    location ~* ^.+\.(bak|log|old|orig|original|php#|php~|php_bak|save|swo|swp|sql)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # WordPress: deny wp-content, wp-includes php files
    location ~* ^/(?:wp-content|wp-includes)/.*\.php$ {
        deny all;
    }

    # Security settings for better privacy
    # Deny hidden files
    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        deny all;
    }


}